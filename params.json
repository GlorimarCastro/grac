{"name":"GRAC","tagline":"","body":"# <a id=\"introduccion\"> Introduction </a>\r\n\r\n### <a id=\"description\"> Description </a>\r\nGRAC is a python based [special-purpose programming language] for [supervised machine learning] and [statistics]. It allows the user to upload CSV files and run classification methods, predictions and statistics on it.\r\n\r\n### <a id=\"motivation\"> Motivation </a>\r\nPython and R are the most used languages for machine learning and data mining. Tools as Weka and Scikit-Learn have been created to facilitate machine learning, data mining, and big data analysis. Weka, however, is for Java programming and just work with attribute-relation file format (ARFF). Scikit-Learn is for Python but doesn't allow you to pre-process text data files. Also, Scikit-Learn requires a lot of dependencies (e.g. NumPy, SciPy, PyDot, etc.).  R is mainly for statistical computing and graphics, making machine learning algorithms hard to code. For these reasons, a new programming tool that converges all the benefits of Weka, Scikit-Learn, and R, but at the same time allow you to program in Python, is desired. Here we propose the creation of a new Python based programming language: GRAC.  GRAC is a programming language for machine learning, data mining and big data analysis that converges some of the benefits of Weka, Scikit-Learn, and R. At the same time GRAC allows you to pre-process text files and it let you use comma-separated values (CSV) files.\r\n\r\nMachine learning, data mining and big data have been used for the advance in artificial intelligence, gene therapy, cybersecurity, bioinformatics, medical diagnosis, computer vision, and so on. Also, they have been used to improve financial trading, business processing, sport, law enforcement, telecommunication, search engines, terrorism detection, etc. A lot of different applications for machine learning, data mining and big data can be mentioned. For that reason, good tools for doing machine learning, data mining, and big data analysis are needed. As we presented before, different tools have been created already for these. We propose to add together all the benefits of these different tools in just one; being the main motivation to allow the users to work with CSV files (one of the most used format in the mentioned fields).  The main purpose of GRAC is to allow the users to just indicate the name of the CSV file and a list of actions, so the research can be accomplished faster.\r\n\r\n\r\n### <a id=\"statSect\"> Statistic Section </a>\r\nThe available methods for statitics are:\r\n  - Mean \r\n  - Average\r\n  - Maximun\r\n  - Minimun\r\n  - Mode\r\n  - Least\r\n  - Random\r\n  - Count\r\n  - Standard Deviation\r\n \r\n### <a id=\"Mach\"> Machine Learning Section </a>\r\nFor now, the machine learning classifiers available are supervised classifiers:\r\n  - [Decision Tree]\r\n  - [Support Vector Machine]\r\n  - [Gaussian Naive Bayes]\r\n  \r\nAlso, GRAC allows you to calculate the best classifier for your data (based on accuracy), and to execute [cross-validation]\r\n\r\n## Version\r\n1.0\r\n\r\n\r\n---\r\n# <a id=\"instal\"> Installation </a>\r\n## <a id=\"depende\"> Dependecies </a>\r\nGRAC uses a series of python packages, all listed in the requirement.txt file. To install this packages you can run the next command line in:\r\n### Ubuntu:\r\n```sh\r\n$ python -m pip install -r requirements.txt\r\n```\r\nMake sure that you have the newest version of pip in your system, since Ubuntu has an outdated version of pip. Inside the dependecies folder you can find the python file get-pip.py, this file is for installing the newest version of pip. \r\n### Windows:\r\nFor windows, if you have Anaconda or Conda yo can run the next command line:\r\n```sh\r\n$ conda create -n new environment --file requirements.txt\r\n```\r\n\r\nIf you don't have Anaconda or Conda, you can install all the dependencies using the next command lines:\r\n```sh\r\n$ python -m pip install numpy\r\n$ python -m pip install scipy\r\n$ python -m pip install ply\r\n$ python -m pip pydot\r\n$ python -m pip scikit-learn\r\n```\r\nIf you get an error installing scikit-learn you should download the source file. Users with Python 2.7 can find an installer for scikit-learn in the dependecies folder.\r\n\r\n## GRAC\r\n\r\nTo use GRAC you can clone this repository or you can download the zip file from the latest release. \r\n\r\n---\r\n\r\n# <a id=\"example\" >Example Section </a>\r\nExamples of how to use GRAC can be found in the [examples] folder\r\n\r\n---\r\n# <a id=\"grammar\"> Grac Grammar </a>\r\n![alt tag](https://github.com/GlorimarCastro/grac/blob/master/imgs/gracgrammar.png?raw=tru)\r\n----\r\n----\r\n# <a id=\"tutorial\"> Language Tutorial </a>\r\nThe next video contain a tutorial and a description of GRAC:\r\n- [https://www.youtube.com/watch?v=SGs17I4_cI8&feature=youtu.be]\r\n\r\nAlso, the user can go to the Reference Manual secction for detailed instruction in how to use the diferent methods of GRAC. \r\n\r\n----\r\n# <a id=\"referencemanual\"> Reference Manual </a>\r\n## <a id=\"basicsyn\"> Basic Syntax </a>\r\n* Main Program: each GRAC program have to start with the GRAC special header\r\n```sh\r\ngrac{\r\n}\r\n```\r\n* Statement Separator:\r\n    Each statement need to end with a semicolon ‘;’, except the last statement. \r\n```sh\r\ngrac{\r\nhasheader = true;\r\nt = 9\r\n}\r\n```\r\n## <a id=\"types\"> Types </a>\r\n#### <a id=\"bool\"> Booleans </a>\r\n* Valid values: true | false\r\n* Descriptions: Expresses a truth value. It can be either True or False. GRAC uses reserved boolean \r\n    variables to specify if CSV file contains header and/or to execute cross validation.\r\n#### <a id=\"path\"> Path </a>\r\n* Valid Values: r'\\\"(.+?)\\\"' \r\n* Description:  a series of characters.  Path variables ares used in uploads methods to \r\n    specify paths for training and testing data files. Also, path variables are used to provide \r\n    a path to save GRAC results.\r\n#### <a id=\"ints\"> Integers </a>\r\n* Valid Values: r'\\d+'\r\n* Description: integers are numbers that can be written without a fractional component. Integers are \r\n    used as array component in the following cross validation reserved variables to specify \r\n    the number of folds and number of columns to train/test: k_fold, class_column, \r\n    test_class_column, feature_columns and test_feature_column.\r\n\r\n#### <a id=\"arra\">Arrays</a>\r\n* Description: an array is a container object that hold a fixed number of values of a single type. Arrays \r\n    are used to execute  statistics functions and to define cross validation reserved variables. \r\n    Only arrays of integers are allowed.\r\n\r\n## <a id=\"varia\">Variables</a>\r\n#### <a id=\"kfold\">kfold:</a>\r\n* kfold - set the number of folds the k-fold cross-validation method will use. \r\n* Default Value: 5\r\n* Accepted values/types: Integer\r\n* example:\r\n```sh\r\n$ grac{\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    kfold = 10;\r\n$    gnbc();\r\n$    executeCV();\r\n$    saveCVResult(“path\\to\\output\\file”)\r\n$}\r\n```\r\n\r\n#### <a id=\"hasheader\">hasheader:</a>\r\n* hasheader - tells whether the first row should be ignored (is a header) or not.\r\n* Default Value: False\r\n* Accepted values/types: Boolean\r\n* Example\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    features_columns = [1,2,52];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    gnbc();\r\n$    execute()\r\n$}\r\n```\r\n\r\n#### <a id=\"classcol\">class_column</a>\r\n* class_column - Identify and separates the column that holds the class from the features in the \r\n    training file. \r\n* Default Value: 0\r\n* Accepted values/types: Integer\r\n* Example\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    features_columns = [1,2,52];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    gnbc();\r\n$    execute()\r\n$}\r\n```\r\n#### <a id=\"testclacol\">test_class_column</a>\r\n* test_class_column - Identify the class column to be used for testing. If no value is set, it will copy the value from class_column.\r\n* Default Value: None\r\n* Accepted values/types: Integer\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n$    predict()\r\n$}\r\n```\r\n#### <a id=\"feacolm\"> features_columns</a>\r\n* features_columns - Identify and separates the columns holding the features from the class.\r\n* Default Value: [1]\r\n* Accepted values/types: Array of Integers\r\n* Example\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    features_columns = [1,2,52];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    gnbc();\r\n$    execute()\r\n$}\r\n```\r\n#### <a id=\"testfeatcolm\">test_features_column</a>\r\n* test_features_column - Identify the columns holding the features to be tested. If no value is set, it will copy the value from features_column.\r\n* Default Value: None\r\n* Accepted values/types: Array of Integers\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n$    predict()\r\n$}\r\n```\r\n\r\n## <a id=\"functions\">Functions</a>\r\n### <a id=\"machinlearfun\">Machine Learning</a>\r\n#### <a id=\"svc\">svc()</a>\r\n* Parameters:\r\n    No parameters needed.\r\n* svc - set the Support Vector Machine classifiers as the classifier to \r\n    be used for any method that use a classifier\r\n* Example\r\n```sh\r\n$ grac{\r\n$     uploadTrainingData(“C:\\path\\to\\file”);\r\n$     svc();\r\n$     execute()\r\n$}\r\n```\r\n#### <a id=\"dtc\">dtc()</a>\r\n* Parameters\r\n    No parameters needed.\r\n* dtc - set the Decision Tree Classifier as the classifier to be used for \r\n    any method that use a classifier. \r\n* Example\r\n```sh\r\n$ grac{\r\n$     uploadTrainingData(“C:\\path\\to\\file”);\r\n$     dtc();\r\n$     execute()\r\n$}\r\n```\r\n#### <a id=\"gnbc\">gnbc()</a>\r\n* Parameters\r\n    No parameters needed.\r\n* gnbc - set the Gaussian Naive Bayes Classifier as the classifier to \r\n    be used for any method that use a classifier\r\n* Example\r\n```sh\r\n$ grac{\r\n$     uploadTrainingData(“C:\\path\\to\\file”);\r\n$     gnbc();\r\n$     execute()\r\n$}\r\n```\r\n\r\n#### <a id=\"execute\">execute() </a>\r\n* Parameters:\r\n    No parameter needed. But this method need that the user already \r\n    set the classifier to use and the training data.\r\n* executeCV - fit the training data uploaded by the user, using the \r\n    specified classifier. \r\n* Example:\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    features_columns = [1,2,52];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    gnbc();\r\n$    execute()\r\n$}\r\n```\r\n#### <a id=\"execcv\">executeCV()</a>\r\n* Parameters:\r\n    No parameter needed. But this method need that the user already \r\n    set the classifier to use and the training data.\r\n* executeCV - do cross-validation using the classifier specified by \r\n    the user. The fold used by default is 5, but the user can change this \r\n    value assigning a different value to the kfold variable. \r\n* Example:\r\n```sh\r\n$ grac{\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    kfold = 3;\r\n$    gnbc();\r\n$    executeCV();\r\n$    saveCVResult(“path\\to\\output\\file”)\r\n$}\r\n```\r\n#### getCVErrorRate()\r\n* Parameters:\r\n    No parameter needed. Before using this method executeCV \r\n    method have to be used. \r\n* getCVErrorRate - print the accuracy, precision, recall and F-score \r\n    generated by the executeCV method. \r\n* Example:\r\n```sh\r\n$ grac{\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    kfold = 3;\r\n$    gnbc();\r\n$    executeCV();\r\n$    saveCVResult(“path\\to\\output\\file”);\r\n$    getCVErrorRate()\r\n$}\r\n```\r\n#### printBestClassifier()\r\n* Parameters:\r\n    No parameters needed. But this method need that the user set the \r\n    data for training and the classifier to use, before using this method.  \r\n* printBestClassifier - Based on accuracy decide between Support \r\n    Vector Machine, Gaussian Naivew Bayes and Decision Tree which \r\n    one is the best to use for the data given as training. The name for \r\n    the selected classifier is printed in the console.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    printBestClassifier()\r\n$    }\r\n```\r\n#### predict()\r\n* Parameters:\r\n    Non parameter needed. Before using this method the test data to \r\n    use have to be uploaded and execute() method have to be used. \r\n* Description:\r\n    predict - using the fit result from execute(), make a prediction for \r\n    the test data uploaded by the user. \r\n* Example:\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n$    predict()\r\n$}\r\n```\r\n\r\n### Statistic\r\n#### mean(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* mean - Calculates the average value (mean) of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    mean(x)\r\n$  }\r\n```\r\n#### avg(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* avg - Calculates the average value (mean) of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    mean(x);\r\n$    avg([1,2,3,4])\r\n$  }\r\n```\r\n#### min(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* min - Calculates the smallest value of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    min(x)\r\n$  }\r\n```\r\n\r\n#### max(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* max - Calculates the largest value of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    max(x)\r\n$  }\r\n```\r\n#### mode(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* Description:\r\nCalculates the most frequent value of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    mode(x)\r\n$  }\r\n```\r\n#### least(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* Description:\r\nCalculates the least frequent value of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    least(x)\r\n$  }\r\n```\r\n\r\n\r\n#### rndm(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* Description:\r\nSelects a random value of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    rndm(x)\r\n$  }\r\n```\r\n#### count(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* Description:\r\nReturns the amount of elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    count(x)\r\n$  }\r\n```\r\n#### stdev(x)\r\n* Parameters: \r\nThe user can enter a variable containing the list of elements, specify a column on the input CSV file containing the elements, or a list of elements directly.\r\n* Description:\r\nCalculates the standard deviation of the elements entered.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    stdev(x)\r\n$  }\r\n```\r\n\r\n\r\n### Data Upload\r\n#### uploadTrainingData()\r\n* Parameters:\r\n    The user must enter the path where the CSV file for training data is \r\n        located. The path must be valid and the file must be CSV type.\r\n* Description:\r\n    In order to train with any of the available classifiers, the training data file \r\n    must be uploaded before.\r\n* Example:\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n }\r\n ```\r\n#### uploadTestData()\r\n* Parameters\r\n    The user must enter the path where the CSV file for test data is \r\n    located. The path must be valid and the file must be CSV type.\r\n* uploadTestData - In order to predict data with any of the available classifiers, the test data \r\n    file must be uploaded before.\r\n* Example\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n$    predict()\r\n$ }\r\n```\r\n#### uploadData()\r\n* Parameters\r\n    The user must enter the path where the CSV file is located. The path \r\n    must be valid and the file must be CSV type.\r\n* uploadData - The  uploaded file contains the predicted data and can be used to run the \r\n    GRAC statistical functions.\r\n* Example\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n$    predict();\r\n$    savePredResult(“fileName”);\r\n$    uploadData(“fileName.csv”);\r\n$    mode(0);\r\n$    mean(0);\r\n$    stdev(0);\r\n$ }\r\n```\r\n\r\n### Saving results:\r\n#### saveCVResult():\r\n* Parameters:\r\n    saveCVResult(path) -The path for the file to save the results\r\n* saveCVResult - Save the predictions of each fold computed by the executeCV in individual files with the format: truth value, predicted value. Also saves a scoring.csv file with the global results including:  precision,  accuracy, recall f-score and confusion matrix of each fold. \r\n* Example:\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    executeCV();\r\n$    saveCVResult()\r\n$ }\r\n```\r\n#### saveStatResult():\r\n* Parameters:\r\n    saveStatResult( path ) - The path for the file to save the results\r\n* saveStatResult - save the result of all the statistical method used by the user. \r\n* Example:\r\n```sh\r\n$ grac{\r\n$    x = [1,2,3,4];\r\n$    stdev(x);\r\n$    max(x);\r\n$    mode(x);\r\n$    saveStatResult()\r\n$  }\r\n```\r\n#### savePredResult():\r\n* Parameters:\r\n    savePredResult( path ) - The path for the file to save the results\r\n* savePredResult - save the result for the prediction method in a CSV file format. The output of the file is:\r\n        truth value, predicted value\r\n* Example\r\n```sh\r\n$ grac{\r\n$    hasheader = true;\r\n$    class_column = 0;\r\n$    test_class_column = 1;\r\n$    features_columns = [1,2,52];\r\n$    test_features_column = [2,5,8];\r\n$    uploadTrainingData(“C:\\path\\to\\file”);\r\n$    uploadTestData(“C:\\path\\to\\file”);\r\n$    svc();\r\n$    execute();\r\n$    predict();\r\n$    savePredResult()\r\n$ }\r\n```\r\n---\r\n# Language Development\r\n### Translator Architecture\r\nFor details of the architecture of the translator see the Grammar and Lexemes, Tokens and Syntax section.\r\n### Interfaces between the modules\r\nIn order to execute some modules, others must be executed first. The modules that depend on others are:\r\n\r\n| Dependant Module      | Methods that need to be run first                                              |\r\n|-----------------------|:--------------------------------------------------------------------------------|\r\n| execute()             | uploadTrainingData(), <br> svc() \\| dtc() \\| gnbc()                                   |\r\n| executeCV()           | uploadTrainingData(), <br> svc() \\| dtc() \\| gnbc()                                    |\r\n| getCVErrorRate()      | uploadTrainingData(), <br> svc() \\| dtc() \\| gnbc(), <br> executeCV()                        |\r\n| printBestClassifier() | uploadTrainingData()                                                           |\r\n| predict()             | uploadTrainingData(), <br> uploadTestData, <br> svc() \\| dtc() \\| gnbc(),execute()           |\r\n| saveCVResult()        | uploadTrainingData(), <br> uploadTestData, <br> svc() \\| dtc() \\| gnbc(),executeCV()         |\r\n| savePredResult()      | uploadTrainingData(), <br> uploadTestData, <br> svc() \\| dtc() \\| gnbc(), <br> execute(), <br> predict() |\r\n\r\n### Softwares used for the translator\r\nPly\r\n### Test methodology & program used to test\r\n\r\nUsing python 2.7 we  tested all the variables used and each method exhaustively and compared the results.  All the code used for testing can be found in the example folder in the github account for the project \r\n\r\n----\r\n# Conclusion\r\n\r\nMachine Learning, data mining, and big data are important fields in programming, as they are used for the advance in Medicine, Cyber Security, Financial Analysis, etc. It would be convenient for a language that could do all  of this without needing support from other languages and complicated file formats. This is why GRAC was created. With GRAC, the user can analyse data in a CSV file using machine learning or statistical methods. <br>\r\nGRAC is extremely convenient, as there is no need for the understanding of many languages. The user only needs to have a basic knowledge of Python, which is one of the most known languages, and be able to follow the basic guidelines of GRAC to fulfill the wanted analysis. \r\n\r\n----\r\n#Developers\r\n  - [Glorimar Castro Noriega] : glorimar.castro@upr.edu\r\n  - [Rafael Feliciano Isales] : rafael.feliciano4@upr.edu\r\n  - [Anthony S Slaughter Amaro] : anthony.slaughter@upr.edu\r\n  - [Carlos E Rosario Gonzalez] : carlos.rosario10@upr.edu\r\n\r\n[//]: # (These are reference links used in the body of this note and get stripped out when the markdown processor does its job. There is no need to format nicely because it shouldn't be seen. Thanks SO - http://stackoverflow.com/questions/4823468/store-comments-in-markdown-syntax)\r\n\r\n   [examples]: <https://github.com/GlorimarCastro/grac/tree/master/examples>\r\n   [special-purpose programming language]: <https://en.wikipedia.org/wiki/Domain-specific_language>\r\n   [supervised machine learning]: <https://en.wikipedia.org/wiki/Supervised_learning>\r\n   [statistics]: <https://en.wikipedia.org/wiki/Statistics>\r\n   [Decision Tree]: <http://mines.humanoriented.com/classes/2010/fall/csci568/portfolio_exports/lguo/decisionTree.html>\r\n   [Support Vector Machine]: <http://www.support-vector-machines.org/>\r\n   [Gaussian Naive Bayes]: <https://en.wikipedia.org/wiki/Naive_Bayes_classifier>\r\n   [cross-validation]: <https://www.cs.cmu.edu/~schneide/tut5/node42.html>\r\n   [Carlos E Rosario Gonzalez]: <https://github.com/zrike>\r\n   [Glorimar Castro Noriega]: <https://github.com/GlorimarCastro>\r\n   [Anthony S Slaughter Amaro]: <https://github.com/slaughter30>\r\n   [https://www.youtube.com/watch?v=SGs17I4_cI8&feature=youtu.be]: <- [https://www.youtube.com/watch?v=SGs17I4_cI8&feature=youtu.be]>\r\n   [Rafael Feliciano Isales]: <https://github.com/rafaelfeliciano4>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}