
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '06A763715946E0BC9613AA0566A52C9F'
    
_lr_action_items = {'CSV_CLASSCOLUMN':([3,21,],[4,4,]),'CROSSVALIDATIONACTION':([3,21,],[6,6,]),'KFOLD':([3,21,],[7,7,]),'GRAC_START':([0,],[1,]),'}':([8,9,10,11,13,14,15,23,25,26,27,28,29,33,],[-5,-7,-8,-4,-6,-2,22,-12,-13,-10,-9,-11,-3,-14,]),']':([30,31,34,],[-15,33,-16,]),',':([30,],[32,]),'INT':([3,16,19,21,24,32,],[13,23,27,13,30,30,]),'[':([17,],[24,]),';':([8,9,10,11,13,14,23,25,26,27,28,33,],[-5,-7,-8,-4,-6,21,-12,-13,-10,-9,-11,-14,]),'CSV_FEATURESCOLUMNS':([3,21,],[5,5,]),'{':([1,],[3,]),'BOOLEAN':([18,20,],[26,28,]),'=':([4,5,6,7,12,],[16,17,18,19,20,]),'CSV_HEADER':([3,21,],[12,12,]),'$end':([2,22,],[0,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([3,21,],[8,8,]),'list':([24,32,],[31,34,]),'crossvalidation_assignment':([3,21,],[9,9,]),'csv_assignment':([3,21,],[10,10,]),'program':([0,],[2,]),'statement':([3,21,],[14,14,]),'statement_list':([3,21,],[15,29,]),'array_list':([17,],[25,]),'method':([3,21,],[11,11,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> GRAC_START { statement_list }','program',4,'p_programm','gracgrammar.py',18),
  ('statement_list -> statement','statement_list',1,'p_statement_list','gracgrammar.py',21),
  ('statement_list -> statement ; statement_list','statement_list',3,'p_statement_list','gracgrammar.py',22),
  ('statement -> method','statement',1,'p_statement','gracgrammar.py',30),
  ('statement -> assignment','statement',1,'p_statement','gracgrammar.py',31),
  ('method -> INT','method',1,'p_method','gracgrammar.py',35),
  ('assignment -> crossvalidation_assignment','assignment',1,'p_assignment','gracgrammar.py',39),
  ('assignment -> csv_assignment','assignment',1,'p_assignment','gracgrammar.py',40),
  ('crossvalidation_assignment -> KFOLD = INT','crossvalidation_assignment',3,'p_crossvalidation_assignment','gracgrammar.py',45),
  ('crossvalidation_assignment -> CROSSVALIDATIONACTION = BOOLEAN','crossvalidation_assignment',3,'p_crossvalidation_assignment','gracgrammar.py',46),
  ('csv_assignment -> CSV_HEADER = BOOLEAN','csv_assignment',3,'p_csv_assignment','gracgrammar.py',55),
  ('csv_assignment -> CSV_CLASSCOLUMN = INT','csv_assignment',3,'p_csv_assignment','gracgrammar.py',56),
  ('csv_assignment -> CSV_FEATURESCOLUMNS = array_list','csv_assignment',3,'p_csv_assignment','gracgrammar.py',57),
  ('array_list -> [ list ]','array_list',3,'p_array_list','gracgrammar.py',69),
  ('list -> INT','list',1,'p_list','gracgrammar.py',73),
  ('list -> INT , list','list',3,'p_list','gracgrammar.py',74),
]
